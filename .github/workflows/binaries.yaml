name: binaries
on:
  workflow_call:
    inputs:
      provenance:
        required: false
        type: boolean
      upload-assets:
        required: false
        type: boolean

permissions:
  contents: read

jobs:
  third-party-licenses:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
      - run: go install github.com/google/go-licenses@v1.6.0
      - name: Download third-party license files
        run: |
          go-licenses save ./... --ignore $(go list -m) --save_path packaging/third-party
          chmod -R u+w packaging/third-party
      - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: third-party-licenses
          path: packaging/third-party/

  binaries:
    needs: [third-party-licenses]
    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04]
    outputs:
      hash-macos-14: ${{ steps.hash.outputs.hash-macos-14 }}
      hash-ubuntu-22.04: ${{ steps.hash.outputs['hash-ubuntu-22.04'] }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: '18'
          cache: npm

      # Install dependencies
      - name: Install cross-compilers
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install g++-aarch64-linux-gnu g++-arm-linux-gnueabihf
      - run: npm ci --ignore-scripts
      # Retrieve third-party license files to include in binary packages
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: third-party-licenses
          path: packaging/third-party/

      # Native build, plus tests for good measure
      - name: Build for ${{ (runner.os == 'macOS' && 'arm64') || 'amd64' }}
        run: |
          npx -c 'node-pre-gyp rebuild'
          npx -c 'node-pre-gyp package'
          mkdir binaries
          mv build/stage/*/* binaries
      - run: npm run test
      # Cross builds
      - name: Cross build for amd64
        if: runner.os == 'macOS'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=x64'
          npx -c 'node-pre-gyp package --target_arch=x64'
          mv build/stage/*/* binaries
        env:
          CGO_ENABLED: '1'
          GOARCH: amd64
      - name: Cross build for arm
        if: runner.os == 'Linux'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=arm'
          npx -c 'node-pre-gyp package --target_arch=arm'
          mv build/stage/*/* binaries
        env:
          CC: arm-linux-gnueabihf-gcc
          CXX: arm-linux-gnueabihf-g++
          CGO_ENABLED: '1'
          GOARCH: arm
      - name: Cross build for arm64
        if: runner.os == 'Linux'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=arm64'
          npx -c 'node-pre-gyp package --target_arch=arm64'
          mv build/stage/*/* binaries
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          CGO_ENABLED: '1'
          GOARCH: arm64

      - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: binaries-${{ matrix.os }}
          path: binaries/
      - id: hash
        run: echo "hash-${{ matrix.os }}=$(openssl sha256 -r * | tr '*' ' ' | jq -Rrs @base64)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: binaries

  upload-binaries:
    if: inputs.upload-assets
    needs: [binaries]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: binaries-*
          merge-multiple: true
          path: binaries
      - run: gh release upload '${{ github.ref_name }}' ./binaries/*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  binary-hashes:
    if: inputs.provenance
    needs: [binaries]
    runs-on: ubuntu-22.04
    outputs:
      hashes: ${{ steps.combine.outputs.hashes }}
    steps:
      - id: combine
        run: echo "hashes=$(jq -nr '[env.HASHES|fromjson|.[]|@base64d]|join("")|@base64')" >> "$GITHUB_OUTPUT"
        env:
          HASHES: ${{ toJSON(needs.binaries.outputs) }}

  binary-provenance:
    if: inputs.provenance
    needs: [binary-hashes]
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.binary-hashes.outputs.hashes }}
      provenance-name: binaries.intoto.jsonl

  upload-binary-provenance:
    if: inputs.provenance && inputs.upload-assets
    needs: [binary-provenance]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.binary-provenance.outputs.provenance-name }}
      - run: gh release upload '${{ github.ref_name }}' '${{ needs.binary-provenance.outputs.provenance-name }}'
        env:
          GH_TOKEN: ${{ github.token }}
