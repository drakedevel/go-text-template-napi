name: binaries
on:
  workflow_call:
    inputs:
      provenance:
        required: false
        type: boolean
      upload-assets:
        required: false
        type: boolean

permissions:
  contents: read

jobs:
  third-party-licenses:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ./.github/actions/setup
        with:
          skip-node: 'true'
      - run: go install github.com/google/go-licenses@v1.6.0
      - name: Download third-party license files
        run: |
          go-licenses save ./... --ignore $(go list -m) --save_path packaging/third-party
          chmod -R u+w packaging/third-party
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: third-party-licenses
          path: packaging/third-party/

  binaries:
    needs: [third-party-licenses]
    strategy:
      matrix:
        os: [macos-15, ubuntu-24.04, windows-2025]
    outputs:
      hash-macos-15: ${{ steps.hash.outputs.hash-macos-15 }}
      hash-ubuntu-24.04: ${{ steps.hash.outputs['hash-ubuntu-24.04'] }}
      hash-windows-2025: ${{ steps.hash.outputs['hash-windows-2025'] }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ./.github/actions/setup

      # Install dependencies
      - name: Install cross-compilers
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install g++-aarch64-linux-gnu g++-arm-linux-gnueabihf
      - run: npm ci --ignore-scripts
      # Retrieve third-party license files to include in binary packages
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: third-party-licenses
          path: packaging/third-party/

      # As of 2025-07-06, the windows-2025 runners include MinGW build 14.2.0-rt_v12-rev2,
      # which seems to produe broken binaries for us. 15.1.0-rt_v12-rev0 also seems to be
      # affected, so just install g++ from the last-known-good release.
      - name: Install older MinGW g++
        run: |
          curl -fsSL -o '${{ runner.temp }}\mingw.7z' 'https://github.com/niXman/mingw-builds-binaries/releases/download/14.2.0-rt_v12-rev1/x86_64-14.2.0-release-posix-seh-ucrt-rt_v12-rev1.7z'
          7z x -o'${{ runner.temp }}' '${{ runner.temp }}\mingw.7z'
          echo 'CXX=${{ runner.temp }}\mingw64\bin\g++.exe' >> "$GITHUB_ENV"
        shell: bash
        if: runner.os == 'Windows'

      # Native build, plus tests for good measure
      - name: Build for ${{ (runner.os == 'macOS' && 'arm64') || 'amd64' }}
        run: |
          npx -c 'node-pre-gyp rebuild'
          npx -c 'node-pre-gyp package'
          mkdir binaries
          mv build/stage/*/* binaries
      - run: npm run test
      # Cross builds
      - name: Cross build for amd64
        if: runner.os == 'macOS'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=x64'
          npx -c 'node-pre-gyp package --target_arch=x64'
          mv build/stage/*/* binaries
        env:
          CGO_ENABLED: '1'
          GOARCH: amd64
      - name: Cross build for arm
        if: runner.os == 'Linux'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=arm'
          npx -c 'node-pre-gyp package --target_arch=arm'
          mv build/stage/*/* binaries
        env:
          CC: arm-linux-gnueabihf-gcc
          CXX: arm-linux-gnueabihf-g++
          CGO_ENABLED: '1'
          GOARCH: arm
      - name: Cross build for arm64
        if: runner.os == 'Linux'
        run: |
          npx -c 'node-pre-gyp rebuild --target_arch=arm64'
          npx -c 'node-pre-gyp package --target_arch=arm64'
          mv build/stage/*/* binaries
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          CGO_ENABLED: '1'
          GOARCH: arm64

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binaries-${{ matrix.os }}
          path: binaries/
      - id: hash
        run: echo "hash-${{ matrix.os }}=$(openssl sha256 -r * | tr '*' ' ' | jq -Rrs @base64)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: binaries

  upload-binaries:
    if: inputs.upload-assets
    needs: [binaries]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: binaries-*
          merge-multiple: true
          path: binaries
      - run: gh release upload '${{ github.ref_name }}' ./binaries/*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  binary-provenance:
    if: inputs.provenance
    needs: [binaries]
    runs-on: ubuntu-24.04
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - run: jq -nr 'env.HASHES|fromjson|.[]|@base64d|rtrimstr("\n")' | sort -k2 > checksums.txt
        env:
          HASHES: ${{ toJSON(needs.binaries.outputs) }}
      - id: attest
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-checksums: checksums.txt
      - run: |
          jq -c . '${{ steps.attest.outputs.bundle-path }}' > binaries.intoto.jsonl
          gh release upload '${{ github.ref_name }}' binaries.intoto.jsonl
        if: inputs.upload-assets
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
